{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nconst Tournaments = props => {\n  _s();\n\n  useEffect(() => {\n    const getTournaments = async () => {\n      const tournamentsFromServer = await fetchTournaments();\n      setTournaments(tournamentsFromServer);\n    };\n\n    getTournaments();\n  }, []); // Fetch Tournaments\n\n  const fetchTournaments = async () => {\n    const res = await fetch(\"http://localhost:5000/tournaments\");\n    const data = await res.json();\n    return data;\n  }; // Fetch Tournament\n\n\n  const fetchTournament = async id => {\n    const res = await fetch(`http://localhost:5000/tournaments/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add Tournament\n\n\n  const addTournament = async tournament => {\n    const res = await fetch(\"http://localhost:5000/tournaments\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(tournament)\n    });\n    const data = await res.json();\n    setTournaments([...tournaments, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n  }; // Delete Tournament\n\n\n  const deleteTournament = async id => {\n    const res = await fetch(`http://localhost:5000/tournaments/${id}`, {\n      method: \"DELETE\"\n    }); //We should control the response status to decide if we will change the state or not.\n\n    res.status === 200 ? setTournaments(tournaments.filter(tournament => tournament.id !== id)) : alert(\"Error Deleting This Tournament\");\n  };\n\n  const returnTournaments = tournaments => {\n    props.passTournamentData(tournaments);\n  };\n};\n\n_s(Tournaments, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Tournaments;\nexport default Tournaments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tournaments\");","map":{"version":3,"names":["BrowserRouter","Router","Routes","Route","useState","useEffect","Tournaments","props","getTournaments","tournamentsFromServer","fetchTournaments","setTournaments","res","fetch","data","json","fetchTournament","id","addTournament","tournament","method","headers","body","JSON","stringify","tournaments","deleteTournament","status","filter","alert","returnTournaments","passTournamentData"],"sources":["/home/marin/Documents/zavrsni/result-tracker-frontend/result-tracker/src/components/Tournaments.js"],"sourcesContent":["import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport {useState, useEffect} from 'react';\n\nconst Tournaments = (props) => {\n  useEffect(() => {\n    const getTournaments = async () => {\n      const tournamentsFromServer = await fetchTournaments();\n      setTournaments(tournamentsFromServer);\n    };\n\n    getTournaments();\n  }, []);\n\n  // Fetch Tournaments\n  const fetchTournaments = async () => {\n    const res = await fetch(\"http://localhost:5000/tournaments\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Fetch Tournament\n  const fetchTournament = async (id) => {\n    const res = await fetch(`http://localhost:5000/tournaments/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Add Tournament\n  const addTournament = async (tournament) => {\n    const res = await fetch(\"http://localhost:5000/tournaments\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(tournament),\n    });\n\n    const data = await res.json();\n\n    setTournaments([...tournaments, data]);\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n  };\n\n  // Delete Tournament\n  const deleteTournament = async (id) => {\n    const res = await fetch(`http://localhost:5000/tournaments/${id}`, {\n      method: \"DELETE\",\n    });\n    //We should control the response status to decide if we will change the state or not.\n    res.status === 200\n      ? setTournaments(tournaments.filter((tournament) => tournament.id !== id))\n      : alert(\"Error Deleting This Tournament\");\n  };\n\n  const returnTournaments = (tournaments) => {\n    props.passTournamentData(tournaments);\n  };\n};\n\nexport default Tournaments;\n"],"mappings":";;AAAA,SAASA,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7BF,SAAS,CAAC,MAAM;IACd,MAAMG,cAAc,GAAG,YAAY;MACjC,MAAMC,qBAAqB,GAAG,MAAMC,gBAAgB,EAApD;MACAC,cAAc,CAACF,qBAAD,CAAd;IACD,CAHD;;IAKAD,cAAc;EACf,CAPQ,EAON,EAPM,CAAT,CAD6B,CAU7B;;EACA,MAAME,gBAAgB,GAAG,YAAY;IACnC,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAAvB;IACA,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;IAEA,OAAOD,IAAP;EACD,CALD,CAX6B,CAkB7B;;;EACA,MAAME,eAAe,GAAG,MAAOC,EAAP,IAAc;IACpC,MAAML,GAAG,GAAG,MAAMC,KAAK,CAAE,qCAAoCI,EAAG,EAAzC,CAAvB;IACA,MAAMH,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;IAEA,OAAOD,IAAP;EACD,CALD,CAnB6B,CA0B7B;;;EACA,MAAMI,aAAa,GAAG,MAAOC,UAAP,IAAsB;IAC1C,MAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAsC;MAC3DO,MAAM,EAAE,MADmD;MAE3DC,OAAO,EAAE;QACP,gBAAgB;MADT,CAFkD;MAK3DC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,UAAf;IALqD,CAAtC,CAAvB;IAQA,MAAML,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;IAEAJ,cAAc,CAAC,CAAC,GAAGc,WAAJ,EAAiBX,IAAjB,CAAD,CAAd,CAX0C,CAa1C;IACA;IACA;EACD,CAhBD,CA3B6B,CA6C7B;;;EACA,MAAMY,gBAAgB,GAAG,MAAOT,EAAP,IAAc;IACrC,MAAML,GAAG,GAAG,MAAMC,KAAK,CAAE,qCAAoCI,EAAG,EAAzC,EAA4C;MACjEG,MAAM,EAAE;IADyD,CAA5C,CAAvB,CADqC,CAIrC;;IACAR,GAAG,CAACe,MAAJ,KAAe,GAAf,GACIhB,cAAc,CAACc,WAAW,CAACG,MAAZ,CAAoBT,UAAD,IAAgBA,UAAU,CAACF,EAAX,KAAkBA,EAArD,CAAD,CADlB,GAEIY,KAAK,CAAC,gCAAD,CAFT;EAGD,CARD;;EAUA,MAAMC,iBAAiB,GAAIL,WAAD,IAAiB;IACzClB,KAAK,CAACwB,kBAAN,CAAyBN,WAAzB;EACD,CAFD;AAGD,CA3DD;;GAAMnB,W;;KAAAA,W;AA6DN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}